// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestBoard.Models;

#nullable disable

namespace QuestBoard.Migrations
{
    [DbContext(typeof(QuestBoardContext))]
    [Migration("20251025194642_Week10_AddSeedData")]
    partial class Week10_AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestBoard.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Genre = "RPG",
                            Name = "Medieval Lands"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Genre = "Adventure",
                            Name = "Sky Realms"
                        });
                });

            modelBuilder.Entity("QuestBoard.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "Mage",
                            GameId = 1,
                            Level = 7,
                            Name = "Testwynd"
                        },
                        new
                        {
                            Id = 2,
                            Class = "Knight",
                            GameId = 1,
                            Level = 5,
                            Name = "Aeris"
                        },
                        new
                        {
                            Id = 3,
                            Class = "Ranger",
                            GameId = 2,
                            Level = 3,
                            Name = "Kael"
                        });
                });

            modelBuilder.Entity("QuestBoard.Models.PlayerQuest", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("PlayerId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("PlayerQuests");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            QuestId = 1,
                            AcceptedAt = new DateTime(2025, 1, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = false
                        },
                        new
                        {
                            PlayerId = 2,
                            QuestId = 1,
                            AcceptedAt = new DateTime(2025, 1, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = false
                        },
                        new
                        {
                            PlayerId = 2,
                            QuestId = 2,
                            AcceptedAt = new DateTime(2025, 1, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = true
                        },
                        new
                        {
                            PlayerId = 3,
                            QuestId = 3,
                            AcceptedAt = new DateTime(2025, 1, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = true
                        },
                        new
                        {
                            PlayerId = 3,
                            QuestId = 4,
                            AcceptedAt = new DateTime(2025, 1, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = false
                        });
                });

            modelBuilder.Entity("QuestBoard.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("RewardGold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Quests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Slay the troll in Frostpeak Cavern.",
                            Difficulty = "Hard",
                            GameId = 1,
                            RewardGold = 250,
                            Title = "Defeat the Cave Troll"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Collect 10 Moonpetal flowers.",
                            Difficulty = "Easy",
                            GameId = 1,
                            RewardGold = 100,
                            Title = "Gather Moonpetals"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Find gears to fix the skyship.",
                            Difficulty = "Normal",
                            GameId = 2,
                            RewardGold = 180,
                            Title = "Skyship Repairs"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Explore the haunted floating isle.",
                            Difficulty = "Hard",
                            GameId = 2,
                            RewardGold = 320,
                            Title = "Isle of Echoes"
                        });
                });

            modelBuilder.Entity("QuestBoard.Models.Player", b =>
                {
                    b.HasOne("QuestBoard.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("QuestBoard.Models.PlayerQuest", b =>
                {
                    b.HasOne("QuestBoard.Models.Player", "Player")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestBoard.Models.Quest", "Quest")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("QuestBoard.Models.Quest", b =>
                {
                    b.HasOne("QuestBoard.Models.Game", "Game")
                        .WithMany("Quests")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("QuestBoard.Models.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("QuestBoard.Models.Player", b =>
                {
                    b.Navigation("PlayerQuests");
                });

            modelBuilder.Entity("QuestBoard.Models.Quest", b =>
                {
                    b.Navigation("PlayerQuests");
                });
#pragma warning restore 612, 618
        }
    }
}
